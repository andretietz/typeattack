name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Publish for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        include:
          - os: ubuntu-latest
            artifact_name: typeattack
            zipcommand: zip -j typeattack-linux-x86_64.zip target/release/typeattack README.md
            asset_name: typeattack-linux-x86_64
          - os: windows-latest
            zipcommand: Compress-Archive target/release/typeattack.exe,README.md typeattack-windows-x86_64.zip
            artifact_name: typeattack.exe
            asset_name: typeattack-windows-x86_64
          - os: macos-latest
            zipcommand: zip -j typeattack-macos-x86_64.zip target/release/typeattack README.md
            artifact_name: typeattack
            asset_name: typeattack-macos-x86_64

    steps:
      - name: Setup Rust environment
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: stable

      - name: Checking out code...
        uses: actions/checkout@v1

      - name: Adjusting Cargo.toml for release...
        run: |
          version=$(grep "^version" Cargo.toml | cut -d"\"" -f2 )
          if [[ $version != *"-SNAPSHOT"* ]]; then
            echo "Version string MUST contain \"-SNAPSHOT\"!"
            exit 1;
          fi
          version=$(grep "^version" Cargo.toml | cut -d"\"" -f2 | sed 's/-SNAPSHOT//g')
          tag=$(echo ${GITHUB_REF/refs\/tags\//} | sed 's/^.//')
          if [[ $version != $tag ]]; then
            echo "Version Mismatch! The version you want to build doesn't match the version in your Cargo.toml.";
            exit 1;
          fi
          sed -i'' "s/version=.*-SNAPSHOT\"/version = \"$version\"/g" Cargo.toml

      - name: Build
        run: |
          cargo test
          cargo build --release --locked
          ${{ matrix.zipcommand }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ matrix.asset_name }}.zip
          asset_name: ${{ matrix.asset_name }}.zip
          tag: ${{ github.ref }}
          overwrite: true
  release:
    needs: build
    name: Creating a release on github
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
